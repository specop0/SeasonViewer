@page "/{RequestName}"
@page "/"

@inject AnimeSeasonService AnimeSeason

@if (this.Animes == null)
{
    <h1>Loading ... </h1>
}
else
{
    <div>
        <button type="button" class="btn btn-secondary" @onclick="@UpdateSeasonRequested">@(this.IsUpdateSeasonRequested ? "..." : "Update MAL Season")</button>
        <button type="button" class="btn btn-secondary" @onclick="@UpdateMalListRequested">@(this.IsUpdateMalListRequested ? "..." : "Update MAL List")</button>
        <button type="button" class="btn btn-secondary" @onclick="@MineMissingRequested">@(this.IsMineMissingTriggered ? "..." : "Mine Missing")</button>
        <select @bind="OrderBy">
            <option value="@OrderCriteria.OrderByNone">None</option>
            <option value="@OrderCriteria.OrderByName">Name</option>
            <option value="@OrderCriteria.OrderByScore">Score</option>
            <option value="@OrderCriteria.OrderByMember"># Member</option>
        </select>
        <select @bind="GroupBy">
            <option value="@GroupCriteria.GroupByNone">None</option>
            <option value="@GroupCriteria.GroupByHoster">Hoster</option>
        </select>
        <select @bind="FilterBy">
            <option value="@FilterCriteria.FilterByNone">None</option>
            <option value="@FilterCriteria.FilterByPlan2Watch">Plan 2 Watch</option>
        </select>
        <button type="button" class="btn btn-secondary" @onclick="@GetData">Apply</button>
    </div>
    foreach (var anime in this.Animes)
    {
        <div id="@anime.Id" class="grid-container" style="margin-bottom: 50px">
            <div class="grid-item grid-item-span">
                <a href="@anime.MalUrl">@anime.Name</a>
            </div>
            <div class="grid-item">
                <img src="@anime.ImageUrl" alt="@anime.Name" />
            </div>
            <div class="grid-item">
                <div>
                    <label class="col-4">Name</label>
                    <span class="col-6">@anime.Name</span>
                </div>
                <div>
                    <label class="col-4"># Episodes</label>
                    <span class="col-6">@anime.MalEpisodesCount</span>
                </div>
                <div>
                    <label class="col-4">MAL Score</label>
                    <span class="col-6">@anime.MalScore</span>
                </div>
                <div>
                    <label class="col-4">MAL # Members</label>
                    <span class="col-6">@anime.MalMembers</span>
                </div>
                <div>
                    <label class="col-4">Hoster mined at</label>
                    @if (anime.HosterMiningTriggered)
                    {
                        <span class="col-6">...</span>
                    }
                    else
                    {
                        <span class="col-6">
                            @anime.HosterMinedAt
                            <button type="button" @onclick="@(() => HosterMiningRequested(anime))" class="btn btn-secondary"><span class="oi oi-reload" /> Refresh</button>
                        </span>
                    }
                </div>
                <div>
                    @if (!anime.HosterMiningTriggered)
                    {
                        @if (anime.HosterEditRequested)
                        {
                            <button type="button" @onclick="@(() => anime.HosterEdit.Add(new Hoster()))">Add</button>
                            <div>
                                @foreach (var hoster in anime.HosterEdit)
                                {
                                    <div>
                                        <button type="button" @onclick="@(() => anime.HosterEdit.Remove(hoster))">Remove</button>
                                        <input type="text" class="col-6" @bind="@hoster.Url" />
                                        <input type="text" class="col-3" @bind="@hoster.Name" />
                                    </div>
                                }
                            </div>
                            <button type="button" @onclick="@(() => ManualHosterEditRequested(anime))" class="btn btn-primary">OK</button>
                            <button type="button" @onclick="@(() => anime.HosterEditRequested = false)" class="btn btn-secondary">Cancel</button>
                        }
                        else
                        {
                            <button type="button" @onclick="@(() => {
                                                              anime.HosterEditRequested = true;
                                                              anime.HosterEdit.Clear();
                                                              anime.HosterEdit.AddRange(anime.Hoster.Select(x => new Hoster { Id = x.Id, HosterType = x.Model.HosterType, Name = x.Name, Url = x.Url }));
                                                          })" class="btn btn-secondary">
                                Edit
                            </button>
                            @foreach (var hoster in anime.Hoster)
                            {
                                <div class="col-12">
                                    <a href="@hoster.Url">
                                        <img src="@hoster.HosterImageUrl" width="16" height="16" />
                                        <span> @hoster.Name @@ @hoster.HosterName</span>
                                    </a>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    }
}

@code{

    public Anime[] Animes { get; set; }

    public OrderCriteria OrderBy { get; set; }
    public GroupCriteria GroupBy { get; set; }
    public FilterCriteria FilterBy { get; set; }

    [Parameter]
    public string RequestName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(this.RequestName))
        {
            var time = DateTime.Now - TimeSpan.FromDays(30.5 * 3);
            var monthToSeason = new Dictionary<int, string> {
                { 1, "winter" },
                { 2, "winter" },
                { 3, "winter" },
                { 4, "spring" },
                { 5, "spring" },
                { 6, "spring" },
                { 7, "summer" },
                { 8, "summer" },
                { 9, "summer" },
                { 10, "fall" },
                { 11, "fall" },
                { 12, "fall" },
            };
            this.RequestName = $"{time.Year}/{monthToSeason[time.Month]}";
        }
        else
        {
            this.RequestName = this.RequestName.Replace("-", "/");
        }
        this.Animes = (await this.AnimeSeason.GetSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];
    }

    protected async Task GetData()
    {
        this.Animes = (await this.AnimeSeason.GetSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];
    }

    public bool IsUpdateSeasonRequested { get; set; }

    public async Task UpdateSeasonRequested()
    {
        if (this.IsUpdateSeasonRequested)
        {
            return;
        }

        this.Animes = (await this.AnimeSeason.UpdateSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];

        this.IsUpdateSeasonRequested = false;
    }

    public bool IsUpdateMalListRequested { get; set; }

    public async Task UpdateMalListRequested()
    {
        if (this.IsUpdateSeasonRequested)
        {
            return;
        }

        this.Animes = (await this.AnimeSeason.UpdateMalListAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];

        this.IsUpdateSeasonRequested = false;
    }

    protected async Task HosterMiningRequested(Anime anime)
    {
        if (anime.HosterMiningTriggered)
        {
            return;
        }

        anime.HosterMiningTriggered = true;

        var response = await this.AnimeSeason.MineHosterAsync(anime);
        if (response?.Anime != null)
        {
            anime.Model = response.Anime;
        }
        anime.HosterMiningTriggered = false;
    }

    protected async Task ManualHosterEditRequested(Anime anime)
    {
        var response = await this.AnimeSeason.EditHosterAsync(anime);

        if (response?.Anime != null)
        {
            anime.Model = response.Anime;
        }
        anime.HosterEditRequested = false;
    }

    public bool IsMineMissingTriggered { get; set; }

    protected async Task MineMissingRequested()
    {
        if (this.IsMineMissingTriggered)
        {
            return;
        }

        this.IsMineMissingTriggered = true;

        var animesCopy = this.Animes.ToArray();
        foreach (var anime in animesCopy)
        {
            if (anime.HosterMinedAt.HasValue)
            {
                continue;
            }

            await HosterMiningRequested(anime);
        }

        this.IsMineMissingTriggered = false;
    }
}