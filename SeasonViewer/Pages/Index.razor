@page "/{RequestName}"
@page "/"

@inject AnimeSeasonService AnimeSeason

@if (this.Animes == null)
{
    <h1>Loading ... </h1>
}
else
{
    <div class="flex">
        @if (this.IsUpdateSeasonRequested)
        {
            <button type="button" class="btn btn-secondary" disabled>Updating MAL Season...</button>
        }
        else
        {
            <button type="button" class="btn btn-secondary" @onclick="@UpdateSeasonRequested">Update MAL Season</button>
        }
        @if (this.IsUpdateMalListRequested)
        {
            <button type="button" class="btn btn-secondary" disabled>Updating MAL List...</button>
        }
        else
        {
            <button type="button" class="btn btn-secondary" @onclick="@UpdateMalListRequested">Update MAL List</button>
        }
        @if (this.IsMineMissingRequested)
        {
            <button type="button" class="btn btn-secondary" disabled>Mining Missing...</button>
        }
        else
        {
            <button type="button" class="btn btn-secondary" @onclick="@MineMissingRequested">Mine Missing</button>
        }
        <select @bind="OrderBy">
            <option value="@OrderCriteria.OrderByNone">None</option>
            <option value="@OrderCriteria.OrderByName">Name</option>
            <option value="@OrderCriteria.OrderByScore">Score</option>
            <option value="@OrderCriteria.OrderByMember"># Member</option>
        </select>
        <select @bind="GroupBy">
            <option value="@GroupCriteria.GroupByNone">None</option>
            <option value="@GroupCriteria.GroupByHoster">Hoster</option>
        </select>
        <select @bind="FilterBy">
            <option value="@FilterCriteria.FilterByNone">None</option>
            <option value="@FilterCriteria.FilterByPlan2Watch">Plan 2 Watch</option>
        </select>
        <button type="button" class="btn btn-secondary" @onclick="@GetData">Apply</button>
    </div>
    foreach (var anime in this.Animes)
    {
        <AnimeForm Anime="@anime" />
    }
}

@code{

    public Anime[] Animes { get; set; }

    public OrderCriteria OrderBy { get; set; }
    public GroupCriteria GroupBy { get; set; }
    public FilterCriteria FilterBy { get; set; }

    [Parameter]
    public string RequestName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(this.RequestName))
        {
            var time = DateTime.Now - TimeSpan.FromDays(30.5 * 3);
            var monthToSeason = new Dictionary<int, string> {
                { 1, "winter" },
                { 2, "winter" },
                { 3, "winter" },
                { 4, "spring" },
                { 5, "spring" },
                { 6, "spring" },
                { 7, "summer" },
                { 8, "summer" },
                { 9, "summer" },
                { 10, "fall" },
                { 11, "fall" },
                { 12, "fall" },
            };
            this.RequestName = $"{time.Year}/{monthToSeason[time.Month]}";
        }
        else
        {
            this.RequestName = this.RequestName.Replace("-", "/");
        }
        this.Animes = (await this.AnimeSeason.GetSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];
    }

    protected async Task GetData()
    {
        this.Animes = (await this.AnimeSeason.GetSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];
    }

    public bool IsUpdateSeasonRequested { get; set; }

    public async Task UpdateSeasonRequested()
    {
        if (this.IsUpdateSeasonRequested)
        {
            return;
        }

        this.IsUpdateSeasonRequested = true;

        this.Animes = (await this.AnimeSeason.UpdateSeasonAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];

        this.IsUpdateSeasonRequested = false;
    }

    public bool IsUpdateMalListRequested { get; set; }

    public async Task UpdateMalListRequested()
    {
        if (this.IsUpdateMalListRequested)
        {
            return;
        }

        this.IsUpdateMalListRequested = true;

        this.Animes = (await this.AnimeSeason.UpdateMalListAsync(this.RequestName, this.OrderBy, this.GroupBy, this.FilterBy)) ?? new Anime[0];

        this.IsUpdateMalListRequested = false;
    }

    public bool IsMineMissingRequested { get; set; }

    protected async Task MineMissingRequested()
    {
        if (this.IsMineMissingRequested)
        {
            return;
        }

        this.IsMineMissingRequested = true;

        var animesCopy = this.Animes.ToArray();
        foreach (var anime in animesCopy)
        {
            if (anime.HosterMinedAt.HasValue)
            {
                continue;
            }

            await AnimeForm.HosterMiningRequested(anime, this.AnimeSeason);
        }

        this.IsMineMissingRequested = false;
    }
}