@inject AnimeSeasonService AnimeSeason

<div id="@this.Anime.Id" class="flex margin-top" style="margin-bottom: 50px">
    <div class="flex-span animetitle">
        <a href="@this.Anime.MalUrl">@this.Anime.Name</a>
    </div>
    <div class="animeimg">
        <img src="@this.Anime.ImageUrl" loading="lazy" alt="@this.Anime.Name" />
    </div>
    <div>
        <div class="grid">
            <label>Name</label>
            <span>@this.Anime.Name</span>
            <label># Episodes</label>
            <span>@this.Anime.MalEpisodesCount</span>
            <label>MAL Score</label>
            <span>@this.Anime.MalScore</span>
            <label>MAL # Members</label>
            <span>@this.Anime.MalMembers</span>
            <label>Hoster mined at</label>
            @if (this.Anime.HosterMiningTriggered)
            {
                <span>...</span>
            }
            else
            {
                <span>@this.Anime.HosterMinedAt</span>
            }
        </div>
        <div class="flex margin-top">
            @if (this.Anime.HosterEditRequested)
            {
                <button type="button" class="btn btn-secondary" disabled><span class="oi oi-pencil" /> Edit</button>
            }
            else
            {
                <button type="button" @onclick="@(() => this.ManualHosterEditRequested(this.Anime))" class="btn btn-secondary"><span class="oi oi-pencil" /> Edit</button>
            }
            @if (this.Anime.AnimeMiningTriggered)
            {
                <button type="button" class="btn btn-secondary" disabled><span class="oi oi-reload" /> Refreshing Anime...</button>
            }
            else
            {
                <button type="button" @onclick="@(() => this.MalMiningRequested(this.Anime))" class="btn btn-secondary"><span class="oi oi-reload" /> Refresh Anime</button>
            }
            @if (this.Anime.HosterMiningTriggered)
            {
                <button type="button" class="btn btn-secondary" disabled><span class="oi oi-reload" /> Refreshing Hoster...</button>
            }
            else
            {
                <button type="button" @onclick="@(() => this.HosterMiningRequested(this.Anime))" class="btn btn-secondary"><span class="oi oi-reload" /> Refresh Hoster</button>
            }
        </div>
        <div class="flex flex-direction-column margin-top">
            @if (!this.Anime.HosterMiningTriggered)
            {
                @if (this.Anime.HosterEditRequested)
                {
                    <div class="flex">
                        <button type="button" @onclick="@(() => this.Anime.HosterEdit.Add(new Hoster()))" class="btn btn-secondary">Add</button>
                        <button type="button" @onclick="@(() => this.ManualHosterEditCancelRequested(this.Anime))" class="btn btn-secondary">Cancel</button>
                        <button type="button" @onclick="@(() => this.ManualHosterEditOkRequested(this.Anime))" class="btn btn-primary">OK</button>
                    </div>
                    <div>
                        <div class="grid grid-template-hosteredit">
                            @foreach (var hoster in this.Anime.HosterEdit)
                            {
                                <div>
                                    <button type="button" @onclick="@(() => this.Anime.HosterEdit.Remove(hoster))" class="btn btn-secondary">Remove</button>
                                </div>
                                <input type="text" @bind="@hoster.Url" />
                                <input type="text" @bind="@hoster.Name" />
                            }
                        </div>
                    </div>
                }
                else
                {
                    @foreach (var hoster in this.Anime.Hoster)
                    {
                        <div>
                            <a href="@hoster.Url">
                                <img src="@hoster.HosterImageUrl" width="16" height="16" />
                                <span> @hoster.Name @@ @hoster.HosterName</span>
                            </a>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Anime Anime { get; set; }

    protected async Task HosterMiningRequested(Anime anime)
    {
        await HosterMiningRequested(anime, this.AnimeSeason);
    }

    public static async Task HosterMiningRequested(Anime anime, AnimeSeasonService animeSeason)
    {
        if (anime.HosterMiningTriggered)
        {
            return;
        }

        anime.HosterMiningTriggered = true;

        var response = await animeSeason.MineHosterAsync(anime);
        if (response?.Anime != null)
        {
            anime.Model = response.Anime;
        }
        anime.HosterMiningTriggered = false;
    }

    protected void ManualHosterEditRequested(Anime anime)
    {
        anime.HosterEditRequested = true;
        anime.HosterEdit.Clear();
        anime.HosterEdit.AddRange(anime.Hoster.Select(x => new Hoster { Id = x.Id, HosterType = x.Model.HosterType, Name = x.Name, Url = x.Url }));
    }

    protected async Task ManualHosterEditOkRequested(Anime anime)
    {
        var response = await this.AnimeSeason.EditHosterAsync(anime);

        if (response?.Anime != null)
        {
            anime.Model = response.Anime;
        }
        anime.HosterEditRequested = false;
    }

    protected void ManualHosterEditCancelRequested(Anime anime)
    {
        anime.HosterEditRequested = false;
    }

    protected async Task MalMiningRequested(Anime anime)
    {
        if (anime.AnimeMiningTriggered)
        {
            return;
        }

        anime.AnimeMiningTriggered = true;

        var response = await this.AnimeSeason.MineMalAsync(anime);
        if (response?.Anime != null)
        {
            anime.Model = response.Anime;
        }

        anime.AnimeMiningTriggered = false;
    }

}
